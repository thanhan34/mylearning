rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isAssistant() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'assistant';
    }
    
    function isAssistantOfTeacher(teacherId) {
      return isAssistant() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.supportingTeacherId == teacherId;
    }
    
    function isTeacherOfClass(classId) {
      return isTeacher() && get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }
    
    function isStudentInClass(classId) {
      return isStudent() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId == classId;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow update: if request.auth.uid == userId;
    }

    match /classes/{classId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow update: if isTeacherOfClass(classId);
    }

    match /homework/{homeworkId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isTeacher() || isAssistant();
    }

    match /submissions/{submissionId} {
      allow read: if isSignedIn();
      allow create: if isStudent();
      allow update, delete: if request.auth.uid == resource.data.studentId || isTeacherOfClass(resource.data.classId) || isAdmin() || isAssistant();
    }

    match /mocktests/{mocktestId} {
      allow read: if isSignedIn();
      allow create: if isStudent() && request.resource.data.studentId == request.auth.uid;
      allow update: if 
        (isStudent() && resource.data.studentId == request.auth.uid) || 
        (isTeacherOfClass(resource.data.classId)) || 
        isAdmin() ||
        isAssistant();
      allow delete: if 
        (isStudent() && resource.data.studentId == request.auth.uid) || 
        isAdmin();
    }

    match /notifications/{notificationId} {
      allow read: if isSignedIn() && (
        resource.data.teacher_id == request.auth.uid ||
        resource.data.admin_id == request.auth.uid ||
        isAdmin()
      );
      allow write: if isAdmin() || isTeacher() || isAssistant();
      allow delete: if isSignedIn() && (
        resource.data.teacher_id == request.auth.uid ||
        resource.data.admin_id == request.auth.uid ||
        isAdmin()
      );
    }

    match /exam-tracking/{trackingId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isTeacher() || isAssistant();
    }

    match /voiceFeedback/{voiceFeedbackId} {
      allow read: if isSignedIn() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.teacherId == request.auth.uid ||
        isAdmin() ||
        isAssistant()
      );
      allow create: if isSignedIn() && (
        isTeacher() || 
        isAdmin() || 
        isAssistant()
      ) && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.teacherId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isSignedIn() && (
        resource.data.teacherId == request.auth.uid ||
        isAdmin()
      );
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.role == 'teacher';
    }

    function isTeacherOfStudent(studentEmail) {
      let studentDoc = get(/databases/$(database)/documents/users/$(studentEmail));
      return studentDoc.data.teacherId == get(/databases/$(database)/documents/users/$(request.auth.token.email)).id;
    }

    match /users/{email} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                  request.auth.token.email == email;
      
      match /homework/{date} {
        allow read, write: if request.auth != null && 
                          request.auth.token.email == email;
      }
    }
    
    match /homework/{email}/{date} {
      // Students can read/write their own homework
      allow read, write: if request.auth != null && 
                        request.auth.token.email == email;
      
      // Teachers can read homework of their assigned students
      allow read: if request.auth != null && 
                 isTeacher() && 
                 isTeacherOfStudent(email);
      
      // Teachers can write feedback
      allow write: if request.auth != null && 
                  isTeacher() && 
                  isTeacherOfStudent(email) &&
                  request.resource.data.diff(resource.data).affectedKeys().hasOnly(['submissions']);
    }
    
    match /dailyProgress/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /assignments/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /classes/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /submissions/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                 exists(/databases/$(database)/documents/users/$(request.auth.token.email)) &&
                 get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.role == 'teacher';
      allow write: if request.auth != null;
      allow delete: if request.auth != null && 
                   resource.data.teacher_id == get(/databases/$(database)/documents/users/$(request.auth.token.email)).id;
    }

    match /examTracking/{docId} {
      // Helper function to check if user is admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.role == 'admin';
      }

      // Students can read/write only their own exam tracking info
      allow read, write: if request.auth != null && 
                        resource.data.studentId == get(/databases/$(database)/documents/users/$(request.auth.token.email)).id;
      
      // Teachers can read exam tracking info of their students
      allow read: if request.auth != null && 
                 isTeacher() && 
                 resource.data.mainTrainer == get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.name;
      
      // Admins can read all exam tracking info
      allow read: if request.auth != null && isAdmin();

      // Allow creation of new exam tracking info by any authenticated user
      allow create: if request.auth != null;
    }
  }
}
